/* Cascading Style Sheets 
Кэшем называется специальное место на локальном компьютере пользователя, куда браузер сохраняет файлы при первом обращении к сайту.
Способы добавления стилей на страницу:
	Связанные стили (располагается в отдельном файле)
	Глобальные стили (с помощью контейнера <style> в заголовке веб-страницы)
	Внутренние стили (Для определения стиля используется атрибут style, а его значением выступает набор стилевых правил)
*/

/*  @import "/style/print.css";
	@import "/style/palm.css";  
	Ключевые слова @media и @import относятся к эт-правилам. */
	
/* 
	селектор { свойство : значение; }
*/	

/*
	em - Размер шрифта текущего элемента.
	1em равен размеру шрифта, заданного в браузере по умолчанию или размеру шрифта родительского элемента.
	pt - Пункт (1 пункт равен 1/72 дюйма.
	in - Дюйм (1 дюйм равен 2,54 см).
	cm - Сантиметр.
	mm - Миллиметр.
*/
body {
  font-family: Arial, Verdana,  sans-serif; /* Семейство шрифтов */
  font-size: 11pt; /* Размер основного шрифта в пунктах  */
  background-color: #f0f0f0; /* Цвет фона веб-страницы */
  color: #333; /* Цвет основного текста */ 
}
h1 {
  color: #a52a2a; /* Цвет заголовка */
  font-size: 24pt; /* Размер шрифта в пунктах */
  font-family: Georgia, Times, serif; /* Семейство шрифтов */
  font-weight: normal; /* Нормальное начертание текста  */
}
p {
  text-align: justify; /* Выравнивание по ширине */
  margin-left: 60px; /* Отступ слева в пикселах */
  margin-right: 10px; /* Отступ справа в пикселах */
  border-left: 1px solid #999; /* Параметры линии слева */
  border-bottom: 1px solid #999; /* Параметры линии снизу */
  padding-left: 10px; /* Отступ от линии слева до текста  */
  padding-bottom: 10px; /* Отступ от линии снизу до текста  */
}

/* Класс может быть присвоен сразу нескольким элементам, а идентификатор только одному. */
P.cite { /* Абзац с классом cite */
    color: navy; /* Цвет текста */
    margin-left: 20px; /* Отступ слева */
    border-left: 1px solid navy; /* Граница слева от текста */
    padding-left: 15px; /* Расстояние от линии до текста */
} 
.term { /* Можно, также, использовать классы и без указания тега. */
    border-bottom: 1px dashed red; /* Подчеркивание под текстом */
}

/* Одновременное использование разных классов */
.level6 { font-size: 2em; }
A.tag { 
    color: #468be1; /* Цвет ссылок */ 
}

#help {
    position: absolute; /* Абсолютное позиционирование */
    left: 160px; /* Положение элемента от левого края */
    top: 50px; /* Положение от верхнего края */
    width: 225px; /* Ширина блока */
    padding: 5px; /* Поля вокруг текста */
    background: #f0f0f0; /* Цвет фона */ 
}
div#help {
    
}

/* Контекстные селекторы 
При создании веб-страницы часто приходится вкладывать одни теги внутрь других. 
Чтобы стили для этих тегов использовались корректно, помогут селекторы, которые работают только в определённом контексте. 
Например, задать стиль для тега <b> только когда он располагается внутри контейнера <p>. */
P B { 
    font-family: Times, serif; /* Семейство шрифта */
    color: navy; /* Синий цвет текста */
}

/* Соседние селекторы */
/* В данном примере происходит изменение цвета текста для содержимого контейнера <i>, когда он располагается сразу после контейнера <b>. */
b + i {
    color: red; /* Красный цвет текста */
} 

/* Родственные селекторы */
/* Родственные селекторы по своему поведению похожи на соседние селекторы (запись вида E + F), но в отличие от них стилевые правила применяются ко всем близлежащим элементам. К примеру, для селектора h1~p стиль будет применяться ко всем элементам <p>, располагающихся после заголовка <h1>. При этом <h1> и <p> должны иметь общего родителя, так что если <p> вставить внутрь <div>, то стили применяться уже не будут. */
b ~ i { 
	color: red;
}

/* Дочерний селектор */
/* Дочерним называется элемент, который непосредственно располагается внутри родительского элемента. */
P > I {
    color: red; /* Красный цвет текста */
}

/* Простой селектор атрибута. Устанавливает стиль для элемента, если задан специфичный атрибут тега. */
Q[title] {
    color: maroon; /* Цвет текста */
}

/* Атрибут со значением */
input[type="radio"] {
	
}

/* Универсальный селектор - соответствует любому элементу веб-страницы */
* { }

/* Псевдоклассы 
Псевдоклассы определяют динамическое состояние элементов, которое изменяется с помощью действий пользователя, а также положение в дереве документа.
Условно все псевдоклассы делятся на три группы:
    определяющие состояние элементов;
    имеющие отношение к дереву элементов;
    указывающие язык текста.

Селектор:Псевдокласс { Описание правил стиля }
*/

/* Псевдоэлементы
Псевдоэлементы позволяют задать стиль элементов не определённых в дереве элементов документа, а также генерировать содержимое, которого нет в исходном коде текста. 

Селектор:Псевдоэлемент { Описание правил стиля }
:after, :before, :first-letter, :first-line
*/

/*
Селекторы группируются в виде списка тегов, разделенных между собой запятыми. В группу могут входить не только селекторы тегов, но также идентификаторы и классы.
Селектор 1, Селектор 2, ... Селектор N { Описание правил стиля }
*/

/* Если для селектора вначале задаётся свойство с одним значением, а затем то же свойство, но уже с другим значением, то применяться будет то значение, которое в коде установлено ниже.
p { color: green; }
p { color: red; }
Параграф будет красным. */

/* Наследованием называется перенос правил форматирования для элементов, находящихся внутри других. Такие элементы являются дочерними, и они наследуют некоторые стилевые свойства своих родителей, внутри которых располагаются. 
*/

/*
Ключевое слово !important играет роль в том случае, когда пользователи подключают свою собственную таблицу стилей. 
Если возникает противоречие, когда стиль автора страницы и пользователя для одного и того же элемента не совпадает, то !important позволяет повысить приоритет стиля или его важность, иными словами. 
Свойство: значение !important
*/