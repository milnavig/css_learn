/* Каждый элемент являеться прямоугольным блоком.
display определяет поведение этих блоков. */

span { /* Отображаем строчные елементы как блочные */
	display: block;
}

p.test { /* Отображаем блочные елементы как строчные */
	display: inline;
}

h1 { /* Элемент не отображается. Места не занимает.*/
	display: none;
}

/* Определяем будет ли элемент виден или спрятан.
Элемент занимает столько же места, как в случае если он виден */
div.hidden {
	visibility: hidden;
}

/* Позиционирование элементов */
/* Нормальное позиционирование */
p#static { /* Используеться по умолчанию. Элемент выводиться в потоке документа как обычно. */
	position: static;
	color: red;
}

/* Фиксированое позиционирование */
/* Размещаеться относительно окна браузера и не будет двигаться даже при прокрутке окна браузера. 
Позицию определяем с помощью свойств top, right, bottom, left.
Такие элементы убираються из нормального потока. Другие элменты ведут себя так, как-будто этого елемента не существует.
Могут перекрывать другие елменты. */
p#fixed {
	position: fixed;
	top: 30px;
	right: 10px;
	color: green;
}

/* Относительное позиционирование 
Положение элемента задаеться относительно его исходного места. 
Сдвиг определяем с помощью свойств top, right, bottom, left.
Зарезервированое место сохраняеться в потоке.
Могут перекрывать другие елменты.
В некоторых тегах применять нельзя. */
p#relative {
	position: relative;
	top: 10px;
	left: 50px;
	background: green;
}

/* Абсолютное позиционирование.
Расположен относительно первого родительского элемента, который имеет любое, но не нормально, положение.
Если такого нет, то содержащий блок это <html>.
Такие элементы убираються из нормального потока. Другие элменты ведут себя так, как-будто этого елемента не существует.
Могут перекрывать другие елменты. */
p#absolute {
	position: absolute;
	top: 10px;
	right: 200px;
}

/* Обтекание.
Элемент может быть выравнен по левому или правому краю, позволяя всем остальным элементам обтекать его вокруг. 
none, left, right */
#photo {
	float: left;
}

/* Отмена действия свойства Float.
Устанавливает с какой стороны элемента запрещено его обтекание другими елементами.
right, left, both */
#clearing {
	clear: both;
}

/* Свойство overflow определяет поведение, которое возникает, когда содержимое элемента выходит за область элемента блока. 
visible, scroll, hidden, auto */
#p2 {
	width: 300px;
	height: 100px;
	background-color: yellow;
	overflow: scroll;
}

/* Когда элементы находяться вне нормального потока, они могут накладываться на другие элементы. 
z-index определяет порядок накладывания. 
По умолчанию: объект что определён похже будет перекрывать элемент что определен раньше.
чем больше индекс - тем важнее элемент. */
#red_block {
	background-color: red;
	height: 100px;
	width: 100px;
	position: relative; /* без него почему-то не работает*/
	z-index: 3;
}

#green_block {
	background-color: green;
	height: 100px;
	width: 100px;
	position: relative;
	top: -20px;
	left: 50px;
	z-index: 2;
}

/* Вендорные префиксы (префиксы браузера).
Нужно использовать для еще не принятых в стандарт CSS свойств. Без него свойство работать не будет. 
-webkit Safari, Chrome, Opera
-moz Mozilla
-ms Internet Explorer */
#border {
	-webkit-border-radius: 24px;
	border: 1px solid green;
	width: 300px;
	height: 300px;
	/* border-radius: 0 0 20px 20px; для каждого угла по отдельности верх-лево, верх-право, низ-право, низ-лево. */
	/* применяет к елементам тень */
	box-shadow: 10px 10px #888888;
	/* можно добавить два опциональных параметра blur (размытие) и spread (растяжение)
	box-shadow: 10px 10px 5px 5px #888888; */
}
#border2 {
	-webkit-border-radius: 24px;
	border: 1px solid green;
	width: 300px;
	height: 300px;
	/* внутреняя тень. Можно пределить много теней. */
	box-shadow: inset 10px 10px #888888;
}

/* Эфект прозрачности. 
Используем RGBA (RGB с альфа-каналом).
альфа лежит от 0 (прозрачный) до 1 (непрозрачный).
HSL (Hue - тон, Saturation - насыщеность, Lightness - светлота.
Тон от 0 до 360 градусов. (0 или 360 - красный, 120 - зеленый, 240 - синий).
насыщеность и светлота от 0 до 100%.
HSLA */
#border3 {
	border: 1px solid green;
	width: 300px;
	height: 300px;
	background-color: rgba(25, 25, 255, 0);
	word-wrap: break-word;
}

/* Загружаем специфические шрифты. Теперь не обязательно что-бы шрифт был установлен у пользователя на компе.
Тип шрифтов .ttf, .otf */
/*
@font-face {
	font-family: Delicious;
	src: url('Delicious.otf');
}
*/

/* Переходы CSS3 - позволяют изменять одно значение свойства на другое в течении заданой продолжительности. 
transition-property - указывает свойство к которому будет применен переход.
transition-duration - определяет продолжительность в течении которой будет происходить переход.
transition-timing-function - как будет изменяться темп перехода
transition-delay - задержка
*/
#border4 {
	border: 1px solid green;
	background-color: rgb(25, 25, 255);
	width: 300px;
	height: 300px;
	transition: width 3s ease-out;
}
#border4:hover {
	width: 200px;
}

/* Трансформации - позволяют транслировать, вращать, масштабировать и искажать элементы.
3D Трансформации */
#border5 {
	border: 1px solid green;
	background-color: rgb(25, 25, 255);
	width: 300px;
	height: 300px;
	transform: rotate(10deg); /* по часовой стрелке */
	/* Устанавливает координаты точки, относительно которой будет происходить трансформация элемента.
	По умолчанию 50% 50% то есть центр объекта.
	Левый верхний угол 0% 0%.
	100% 100% - нижний правый угол. */
	transform-origin: 25% 75%;
	/* двигает элемент */
	/* transform: translate(100px, 50px); */
	/* наклоняет элемент вдоль оси Х и оси У на заданый угол.
	transform: skew(30deg); 
	transform: scale(0.7, 0.7); */
}

/* Множество трансформаций */
#border6 {
	border: 1px solid green;
	background-color: rgb(25, 25, 255);
	width: 300px;
	height: 300px;
	transform: rotate(10deg) scale(0.7, 0.7) translate(100px, 50px); 
}

/* Анимация СSS3 - позволяет с одного стиля постепенно измениться к другому.
Ключевые кадры - стили которые будут использоваться в каждый момент. 
Можно использовать одно свойство - animation */
#border7 {
	border: 3px solid green;
	background-color: rgb(25, 25, 200);
	width: 300px;
	height: 300px;
	animation-name: colorchange;
	animation-duration: 3s;
	animation-iteration-count: 5; /* infinite */
}
@keyframes colorchange { /* имя анимации придумываем сами */
	0% {background-color: rgb(25, 25, 200);}
	50% {background-color: rgb(25, 250, 20);}
	100% {background-color: rgb(250, 25, 20);}
}
/*
@keyframes colorchange {
	from {background-color: rgb(25, 25, 200);}
	to {background-color: rgb(25, 250, 20);}
}
Эквивалент:
@keyframes colorchange {
	0% {background-color: rgb(25, 25, 200);}
	100% {background-color: rgb(25, 250, 20);}
}
*/

/* margin (поле) и padding (отступ) 
padding – это отступ от содержимого до края блока, то margin – это расстояние от одного блока до другого, межблоковое пространство. */